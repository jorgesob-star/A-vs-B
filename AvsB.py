import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Comparador de Ganhos TVDE",
    page_icon="üöó",
    layout="wide"
)

# T√≠tulo da aplica√ß√£o
st.title("üöó Comparador de Ganhos TVDE")
st.markdown("Compare os lucros entre usar carro alugado e carro pr√≥prio para trabalhar como motorista TVDE.")

# ---
# L√≥gica de Inicializa√ß√£o dos Par√¢metros
# ---

# Inicializa todos os par√¢metros no session_state com valores padr√£o
if 'show_params' not in st.session_state:
    st.session_state.show_params = False
if 'rental_cost' not in st.session_state:
    st.session_state.rental_cost = 280.0
if 'rental_commission' not in st.session_state:
    st.session_state.rental_commission = 7
if 'own_insurance' not in st.session_state:
    st.session_state.own_insurance = 45.0
if 'own_maintenance' not in st.session_state:
    st.session_state.own_maintenance = 50.0
if 'own_commission' not in st.session_state:
    st.session_state.own_commission = 12
if 'weeks_comparison' not in st.session_state:
    st.session_state.weeks_comparison = 4

# ---
# Se√ß√£o de Entrada de Dados e Par√¢metros
# ---

col1, col2 = st.columns(2)

with col1:
    st.header("üìä Dados de Entrada")
    
    weekly_earnings = st.number_input(
        "Ganhos Semanais (‚Ç¨):", 
        min_value=0.0, 
        value=800.0, 
        step=50.0,
        help="Valor total ganho por semana antes de despesas"
    )
    
    fuel_cost = st.number_input(
        "Custo Semanal com Combust√≠vel (‚Ç¨):", 
        min_value=0.0, 
        value=200.0, 
        step=10.0,
        help="Custo semanal estimado com combust√≠vel"
    )
    
    # Per√≠odo de compara√ß√£o
    st.session_state.weeks_comparison = st.number_input(
        "Per√≠odo de Compara√ß√£o (semanas):",
        min_value=1,
        max_value=52,
        value=st.session_state.weeks_comparison,
        help="Selecione o n√∫mero de semanas para comparar"
    )

# Bot√£o para mostrar/ocultar par√¢metros
if st.button("‚öôÔ∏è Mostrar/Ocultar Par√¢metros Avan√ßados"):
    st.session_state.show_params = not st.session_state.show_params

# Mostrar par√¢metros apenas se show_params for True
if st.session_state.show_params:
    with col2:
        st.header("‚öôÔ∏è Par√¢metros Avan√ßados")
        
        # Par√¢metros para carro alugado
        st.subheader("Carro Alugado")
        st.session_state.rental_cost = st.number_input(
            "Custo do Aluguel (‚Ç¨/semana):", 
            min_value=0.0, 
            value=st.session_state.rental_cost, 
            step=10.0
        )
        
        st.session_state.rental_commission = st.number_input(
            "Comiss√£o com Carro Alugado (%):", 
            min_value=0, 
            max_value=30, 
            value=st.session_state.rental_commission, 
            step=1
        )
        
        # Par√¢metros para carro pr√≥prio
        st.subheader("Carro Pr√≥prio")
        st.session_state.own_insurance = st.number_input(
            "Seguro (‚Ç¨/semana):", 
            min_value=0.0, 
            value=st.session_state.own_insurance, 
            step=5.0
        )
        
        st.session_state.own_maintenance = st.number_input(
            "Manuten√ß√£o (‚Ç¨/semana):", 
            min_value=0.0, 
            value=st.session_state.own_maintenance, 
            step=5.0,
            help="Custo semanal estimado com manuten√ß√£o do ve√≠culo pr√≥prio"
        )
        
        st.session_state.own_commission = st.number_input(
            "Comiss√£o com Carro Pr√≥prio (%):", 
            min_value=0, 
            max_value=30, 
            value=st.session_state.own_commission, 
            step=1
        )

# ---
# Se√ß√£o de C√°lculos
# ---

# Fun√ß√£o para realizar os c√°lculos
def calcular_ganhos(weekly_earnings, fuel_cost, weeks=1):
    # Calcular para carro alugado
    rental_commission_value = weekly_earnings * (st.session_state.rental_commission / 100)
    rental_net_weekly = weekly_earnings - rental_commission_value - st.session_state.rental_cost - fuel_cost
    rental_net_total = rental_net_weekly * weeks
    
    # Calcular para carro pr√≥prio
    own_commission_value = weekly_earnings * (st.session_state.own_commission / 100)
    own_net_weekly = weekly_earnings - own_commission_value - st.session_state.own_insurance - st.session_state.own_maintenance - fuel_cost
    own_net_total = own_net_weekly * weeks
    
    difference_weekly = rental_net_weekly - own_net_weekly
    difference_total = rental_net_total - own_net_total
    
    return (rental_net_weekly, rental_net_total, own_net_weekly, own_net_total, 
            difference_weekly, difference_total, rental_commission_value, own_commission_value)

# Bot√£o de c√°lculo
if st.button("Calcular", type="primary"):
    (rental_net_weekly, rental_net_total, own_net_weekly, own_net_total, 
     difference_weekly, difference_total, rental_commission_value, own_commission_value) = calcular_ganhos(
        weekly_earnings, fuel_cost, st.session_state.weeks_comparison)
    
    # ---
    # Se√ß√£o de Resultados
    # ---

    st.header("üìà Resultados")
    
    # M√©tricas semanais
    st.subheader(f"Resultados Semanais")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Carro Alugado (L√≠quido Semanal)", 
            f"‚Ç¨ {rental_net_weekly:.2f}",
            delta_color="inverse" if rental_net_weekly < 0 else "normal"
        )
    
    with col2:
        st.metric(
            "Carro Pr√≥prio (L√≠quido Semanal)", 
            f"‚Ç¨ {own_net_weekly:.2f}",
            delta_color="inverse" if own_net_weekly < 0 else "normal"
        )
    
    with col3:
        st.metric(
            "Diferen√ßa Semanal", 
            f"‚Ç¨ {difference_weekly:.2f}",
            delta_color="inverse" if difference_weekly < 0 else "normal"
        )
    
    # M√©tricas totais
    st.subheader(f"Resultados no Per√≠odo de {st.session_state.weeks_comparison} semanas")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Carro Alugado (Total)", 
            f"‚Ç¨ {rental_net_total:.2f}",
            delta_color="inverse" if rental_net_total < 0 else "normal"
        )
    
    with col2:
        st.metric(
            "Carro Pr√≥prio (Total)", 
            f"‚Ç¨ {own_net_total:.2f}",
            delta_color="inverse" if own_net_total < 0 else "normal"
        )
    
    with col3:
        st.metric(
            "Diferen√ßa Total", 
            f"‚Ç¨ {difference_total:.2f}",
            delta_color="inverse" if difference_total < 0 else "normal"
        )
    
    # Detalhamento dos c√°lculos
    st.subheader("Detalhamento dos C√°lculos (Semanal)")
    
    comparison_data = {
        "Descri√ß√£o": [
            "Ganhos Semanais",
            f"Comiss√£o ({st.session_state.rental_commission}%)",
            "Custo do Aluguel",
            "Seguro",
            "Manuten√ß√£o",
            "Custo com Combust√≠vel",
            "Total L√≠quido"
        ],
        "Carro Alugado (‚Ç¨)": [
            weekly_earnings,
            -rental_commission_value,
            -st.session_state.rental_cost,
            0,
            0,
            -fuel_cost,
            rental_net_weekly
        ],
        "Carro Pr√≥prio (‚Ç¨)": [
            weekly_earnings,
            -own_commission_value,
            0,
            -st.session_state.own_insurance,
            -st.session_state.own_maintenance,
            -fuel_cost,
            own_net_weekly
        ]
    }
    
    df = pd.DataFrame(comparison_data)
    st.dataframe(df, use_container_width=True, hide_index=True)
    
    # Recomenda√ß√£o
    st.subheader("Recomenda√ß√£o")
    if difference_weekly > 0.01:
        st.success(f"‚úÖ O carro alugado √© mais vantajoso por ‚Ç¨ {difference_weekly:.2f} por semana.")
        st.info(f"üí∞ Em {st.session_state.weeks_comparison} semanas, voc√™ economizaria ‚Ç¨ {difference_total:.2f} com carro alugado.")
    elif difference_weekly < -0.01:
        st.success(f"‚úÖ O carro pr√≥prio √© mais vantajoso por ‚Ç¨ {abs(difference_weekly):.2f} por semana.")
        st.info(f"üí∞ Em {st.session_state.weeks_comparison} semanas, voc√™ economizaria ‚Ç¨ {abs(difference_total):.2f} com carro pr√≥prio.")
    else:
        st.info("‚ÑπÔ∏è Ambas as op√ß√µes t√™m o mesmo resultado financeiro.")
    
    # Visualiza√ß√£o gr√°fica
    st.subheader("Compara√ß√£o Visual")
    
    # Gr√°fico de compara√ß√£o semanal
    weekly_data = pd.DataFrame({
        "Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"],
        "Lucro L√≠quido (‚Ç¨)": [rental_net_weekly, own_net_weekly]
    })
    
    fig_weekly = px.bar(weekly_data, x="Op√ß√£o", y="Lucro L√≠quido (‚Ç¨)", 
                        title="Compara√ß√£o Semanal de Lucro L√≠quido",
                        color="Op√ß√£o")
    st.plotly_chart(fig_weekly, use_container_width=True)
    
    # Gr√°fico de compara√ß√£o total
    total_data = pd.DataFrame({
        "Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"],
        "Lucro L√≠quido (‚Ç¨)": [rental_net_total, own_net_total]
    })
    
    fig_total = px.bar(total_data, x="Op√ß√£o", y="Lucro L√≠quido (‚Ç¨)", 
                       title=f"Compara√ß√£o Total de Lucro L√≠quido ({st.session_state.weeks_comparison} semanas)",
                       color="Op√ß√£o")
    st.plotly_chart(fig_total, use_container_width=True)

# ---
# Informa√ß√µes Adicionais e Rodap√©
# ---

with st.expander("üí° Dicas e Informa√ß√µes"):
    st.markdown("""
    - **Ganhos Semanais**: Valor total que voc√™ recebe pelos servi√ßos de TVDE em uma semana.
    - **Custo com Combust√≠vel**: Gasto semanal estimado com abastecimento.
    - **Comiss√£o**: Percentual que a plataforma ret√©m pelos servi√ßos.
    - **Custo do Aluguel**: Valor semanal pelo aluguel do ve√≠culo (se aplic√°vel).
    - **Seguro**: Custo semanal do seguro do ve√≠culo pr√≥prio.
    - **Manuten√ß√£o**: Custo semanal estimado com manuten√ß√£o do ve√≠culo pr√≥prio.
                
    ‚ö†Ô∏è Lembre-se de considerar outros custos n√£o inclu√≠dos aqui, como:
    - Lavagens e limpeza
    - Estacionamento e portagens
    - Desvaloriza√ß√£o do ve√≠culo (no caso de carro pr√≥prio)
    - Impostos e taxas
    - Custos de aquisi√ß√£o do ve√≠culo pr√≥prio (precisa ser dilu√≠do ao longo do tempo)
    """)

st.markdown("---")
st.caption("Desenvolvido para ajudar motoristas TVDE a tomar decis√µes financeiras informadas.")
