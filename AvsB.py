import streamlit as st  
import pandas as pd  

# Configura√ß√£o da p√°gina  
st.set_page_config(  
    page_title="Comparador de Ganhos TVDE",  
    page_icon="üöó",  
    layout="wide"  
)  

# T√≠tulo da aplica√ß√£o  
st.title("üöó Comparador de Ganhos TVDE")  
st.markdown("Compare os lucros entre usar carro alugado e carro pr√≥prio para trabalhar como motorista TVDE.")  

# --- Inicializa√ß√£o dos Par√¢metros ---  
if 'show_params' not in st.session_state:  
    st.session_state.show_params = False  
if 'rental_cost' not in st.session_state:  
    st.session_state.rental_cost = 270.0  
if 'rental_commission' not in st.session_state:  
    st.session_state.rental_commission = 6.0  
if 'own_insurance' not in st.session_state:  
    st.session_state.own_insurance = 45.0  
if 'own_maintenance' not in st.session_state:  
    st.session_state.own_maintenance = 50.0  
if 'own_commission' not in st.session_state:  
    st.session_state.own_commission = 12.0  
if 'extra_expenses' not in st.session_state:  
    st.session_state.extra_expenses = 0.0  
if 'include_extra_expenses' not in st.session_state:  
    st.session_state.include_extra_expenses = False  
if 'calculation_type' not in st.session_state:  
    st.session_state.calculation_type = None  

# --- Entrada de Dados ---  
col1, col2 = st.columns(2)  

with col1:  
    st.header("üìä Dados de Entrada")  
    weekly_earnings = st.number_input("Ganhos Semanais (‚Ç¨):", min_value=0.0, value=999.0, step=50.0)  
    weekly_hours = st.number_input("Horas Trabalhadas por Semana:", min_value=0.0, value=56.0, step=1.0)  
    fuel_cost = st.number_input("Custo Semanal com Combust√≠vel (‚Ç¨):", min_value=0.0, value=170.0, step=10.0)  

with col2:  
    st.header("üìè Quilometragem")  
    weekly_km = st.number_input("Quil√≥metros percorridos por semana:", min_value=0.0, value=1200.0, step=50.0)  

# Despesas Extras  
st.header("üí∏ Despesas Extras")  
extra_col1, extra_col2 = st.columns(2)  
with extra_col1:  
    st.session_state.include_extra_expenses = st.checkbox("Incluir despesas extras (informativo)", value=st.session_state.include_extra_expenses)  
with extra_col2:  
    if st.session_state.include_extra_expenses:  
        st.session_state.extra_expenses = st.number_input("Despesas Extras Semanais (‚Ç¨):", min_value=0.0, value=st.session_state.extra_expenses, step=5.0)  

# Par√¢metros Avan√ßados  
if st.button("‚öôÔ∏è Par√¢metros Avan√ßados"):  
    st.session_state.show_params = not st.session_state.show_params  

if st.session_state.show_params:  
    st.header("‚öôÔ∏è Par√¢metros Avan√ßados")  
    adv_col1, adv_col2 = st.columns(2)  
    with adv_col1:  
        st.subheader("Carro Alugado")  
        st.session_state.rental_cost = st.number_input("Custo do Aluguel (‚Ç¨/semana):", min_value=0.0, value=st.session_state.rental_cost, step=10.0)  
        st.session_state.rental_commission = st.number_input("Comiss√£o com Carro Alugado (%):", min_value=0.0, max_value=30.0, value=st.session_state.rental_commission, step=0.5)  
    with adv_col2:  
        st.subheader("Carro Pr√≥prio")  
        st.session_state.own_insurance = st.number_input("Seguro (‚Ç¨/semana):", min_value=0.0, value=st.session_state.own_insurance, step=5.0)  
        st.session_state.own_maintenance = st.number_input("Manuten√ß√£o (‚Ç¨/semana):", min_value=0.0, value=st.session_state.own_maintenance, step=5.0)  
        st.session_state.own_commission = st.number_input("Comiss√£o com Carro Pr√≥prio (%):", min_value=0.0, max_value=30.0, value=st.session_state.own_commission, step=0.5)  

# Bot√µes de C√°lculo  
st.header("üßÆ Calcular")  
calc_col1, calc_col2, calc_col3 = st.columns(3)  
with calc_col1:  
    if st.button("Calcular Carro Alugado"):  
        st.session_state.calculation_type = "alugado"  
with calc_col2:  
    if st.button("Calcular Carro Pr√≥prio"):  
        st.session_state.calculation_type = "pr√≥prio"  
with calc_col3:  
    if st.button("Comparar Ambos"):  
        st.session_state.calculation_type = "comparar"  

# --- Fun√ß√£o de C√°lculo ---  
def calcular_ganhos(weekly_earnings, weekly_hours, fuel_cost, weekly_km, calculation_type):  
    resultados = {}  
    if calculation_type in ["alugado", "comparar"]:  
        rental_commission_value = weekly_earnings * (st.session_state.rental_commission / 100)  
        rental_net = weekly_earnings - rental_commission_value - st.session_state.rental_cost - fuel_cost  
        resultados["alugado"] = {  
            "l√≠quido": rental_net,  
            "hora": rental_net / weekly_hours if weekly_hours > 0 else 0,  
            "fuel_km": fuel_cost / weekly_km if weekly_km > 0 else 0,  
            "total_km": (st.session_state.rental_cost + fuel_cost) / weekly_km if weekly_km > 0 else 0,  
            "profit_km": rental_net / weekly_km if weekly_km > 0 else 0  
        }  
    if calculation_type in ["pr√≥prio", "comparar"]:  
        own_commission_value = weekly_earnings * (st.session_state.own_commission / 100)  
        own_net = weekly_earnings - own_commission_value - st.session_state.own_insurance - st.session_state.own_maintenance - fuel_cost  
        resultados["pr√≥prio"] = {  
            "l√≠quido": own_net,  
            "hora": own_net / weekly_hours if weekly_hours > 0 else 0,  
            "fuel_km": fuel_cost / weekly_km if weekly_km > 0 else 0,  
            "total_km": (st.session_state.own_insurance + st.session_state.own_maintenance + fuel_cost) / weekly_km if weekly_km > 0 else 0,  
            "profit_km": own_net / weekly_km if weekly_km > 0 else 0  
        }  
    if calculation_type == "comparar" and "alugado" in resultados and "pr√≥prio" in resultados:  
        resultados["diferen√ßa"] = resultados["alugado"]["l√≠quido"] - resultados["pr√≥prio"]["l√≠quido"]  
        resultados["diferen√ßa_hora"] = resultados["alugado"]["hora"] - resultados["pr√≥prio"]["hora"]  
        resultados["diferen√ßa_km"] = resultados["alugado"]["profit_km"] - resultados["pr√≥prio"]["profit_km"]  
    return resultados  

# --- Executar e Mostrar Resultados ---  
if st.session_state.calculation_type:  
    resultados = calcular_ganhos(weekly_earnings, weekly_hours, fuel_cost, weekly_km, st.session_state.calculation_type)  
    st.header("üìà Resultados")  

    if st.session_state.calculation_type == "comparar":  
        alugado = resultados["alugado"]  
        proprio = resultados["pr√≥prio"]  

        st.subheader("Compara√ß√£o Visual")  
        tab1, tab2, tab3 = st.tabs(["Lucro Semanal", "M√©dia Hor√°ria", "Lucro por Km"])  

        with tab1:  
            st.bar_chart(pd.DataFrame({"Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"], "Lucro L√≠quido Semanal (‚Ç¨)": [alugado['l√≠quido'], proprio['l√≠quido']]}), x="Op√ß√£o", y="Lucro L√≠quido Semanal (‚Ç¨)")  

        with tab2:  
            st.bar_chart(pd.DataFrame({"Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"], "M√©dia Hor√°ria (‚Ç¨)": [alugado['hora'], proprio['hora']]}), x="Op√ß√£o", y="M√©dia Hor√°ria (‚Ç¨)")  

        with tab3:  
            st.bar_chart(pd.DataFrame({"Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"], "Lucro por Km (‚Ç¨)": [alugado['profit_km'], proprio['profit_km']]}), x="Op√ß√£o", y="Lucro por Km (‚Ç¨)")  

    if st.session_state.include_extra_expenses:  
        st.info(f"üí° Despesas extras informativas: ‚Ç¨ {st.session_state.extra_expenses:.2f} por semana (n√£o afeta os c√°lculos).")
