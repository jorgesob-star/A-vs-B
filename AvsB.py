import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Comparador de Ganhos TVDE",
    page_icon="üöó",
    layout="wide"
)

# Estilo CSS para melhorar a apar√™ncia
st.markdown("""
    <style>
    .main {background-color: #f5f5f5;}
    .stButton>button {background-color: #4CAF50; color: white; border-radius: 8px;}
    .stButton>button:hover {background-color: #45a049;}
    .stNumberInput input {border-radius: 5px;}
    .stMetric {border: 1px solid #ddd; border-radius: 8px; padding: 10px;}
    .stExpander {border: 1px solid #ddd; border-radius: 8px;}
    </style>
""", unsafe_allow_html=True)

# T√≠tulo da aplica√ß√£o
st.title("üöó Comparador de Ganhos TVDE")
st.markdown("Compare os lucros entre usar carro alugado e carro pr√≥prio para trabalhar como motorista TVDE.", unsafe_allow_html=True)

# ---
# L√≥gica de Inicializa√ß√£o dos Par√¢metros
# ---
if 'show_params' not in st.session_state:
    st.session_state.show_params = False
if 'rental_cost' not in st.session_state:
    st.session_state.rental_cost = 280.0
if 'rental_commission' not in st.session_state:
    st.session_state.rental_commission = 7.0
if 'own_insurance' not in st.session_state:
    st.session_state.own_insurance = 45.0
if 'own_maintenance' not in st.session_state:
    st.session_state.own_maintenance = 50.0
if 'own_commission' not in st.session_state:
    st.session_state.own_commission = 12.0
if 'other_costs' not in st.session_state:
    st.session_state.other_costs = 0.0

# ---
# Se√ß√£o de Entrada de Dados
# ---
st.header("üìä Dados de Entrada")
col1, col2 = st.columns([1, 1])

with col1:
    weekly_earnings = st.number_input(
        "Ganhos Semanais (‚Ç¨):",
        min_value=0.0,
        value=800.0,
        step=50.0,
        help="Valor total ganho por semana antes de despesas",
        format="%.2f"
    )
    
    fuel_cost = st.number_input(
        "Custo Semanal com Combust√≠vel (‚Ç¨):",
        min_value=0.0,
        value=200.0,
        step=10.0,
        help="Custo semanal estimado com combust√≠vel",
        format="%.2f"
    )

with col2:
    st.session_state.other_costs = st.number_input(
        "Outros Custos Semanais (‚Ç¨):",
        min_value=0.0,
        value=st.session_state.other_costs,
        step=5.0,
        help="Custos adicionais, como lavagem, estacionamento ou portagens",
        format="%.2f"
    )

# Bot√£o para mostrar/ocultar par√¢metros
if st.button("‚öôÔ∏è Mostrar/Ocultar Par√¢metros"):
    st.session_state.show_params = not st.session_state.show_params

# Bot√£o para redefinir par√¢metros
if st.session_state.show_params:
    if st.button("üîÑ Redefinir Par√¢metros"):
        st.session_state.rental_cost = 280.0
        st.session_state.rental_commission = 7.0
        st.session_state.own_insurance = 45.0
        st.session_state.own_maintenance = 50.0
        st.session_state.own_commission = 12.0
        st.session_state.other_costs = 0.0
        st.session_state.show_params = False
        st.rerun()

# Mostrar par√¢metros apenas se show_params for True
if st.session_state.show_params:
    st.header("‚öôÔ∏è Par√¢metros Avan√ßados")
    col3, col4 = st.columns(2)
    
    with col3:
        st.subheader("Carro Alugado")
        st.session_state.rental_cost = st.number_input(
            "Custo do Aluguel (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.rental_cost,
            step=10.0,
            format="%.2f"
        )
        st.session_state.rental_commission = st.number_input(
            "Comiss√£o com Carro Alugado (%):",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.rental_commission,
            step=1.0,
            format="%.1f"
        )
    
    with col4:
        st.subheader("Carro Pr√≥prio")
        st.session_state.own_insurance = st.number_input(
            "Seguro (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.own_insurance,
            step=5.0,
            format="%.2f"
        )
        st.session_state.own_maintenance = st.number_input(
            "Manuten√ß√£o (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.own_maintenance,
            step=5.0,
            help="Custo semanal estimado com manuten√ß√£o do ve√≠culo pr√≥prio",
            format="%.2f"
        )
        st.session_state.own_commission = st.number_input(
            "Comiss√£o com Carro Pr√≥prio (%):",
            min_value=0.0,
            max_value=100.0,
            value=st.session_state.own_commission,
            step=1.0,
            format="%.1f"
        )

# ---
# Se√ß√£o de C√°lculos
# ---
def calcular_ganhos(weekly_earnings, fuel_cost, other_costs):
    """
    Calcula os lucros l√≠quidos para carro alugado e pr√≥prio, considerando comiss√µes e custos.
    Args:
        weekly_earnings (float): Ganhos semanais brutos.
        fuel_cost (float): Custo semanal com combust√≠vel.
        other_costs (float): Outros custos semanais (lavagem, estacionamento, etc.).
    Returns:
        tuple: Lucro l√≠quido (alugado, pr√≥prio), diferen√ßa, valores das comiss√µes.
    """
    # Carro alugado
    rental_commission_value = weekly_earnings * (st.session_state.rental_commission / 100)
    rental_net = weekly_earnings - rental_commission_value - st.session_state.rental_cost - fuel_cost - other_costs
    
    # Carro pr√≥prio
    own_commission_value = weekly_earnings * (st.session_state.own_commission / 100)
    own_net = weekly_earnings - own_commission_value - st.session_state.own_insurance - st.session_state.own_maintenance - fuel_cost - other_costs
    
    difference = rental_net - own_net
    
    return rental_net, own_net, difference, rental_commission_value, own_commission_value

# Bot√£o de c√°lculo
if st.button("Calcular", type="primary"):
    # Valida√ß√£o de entradas
    if weekly_earnings == 0 and fuel_cost == 0 and st.session_state.other_costs == 0:
        st.error("üö´ Por favor, insira valores v√°lidos para ganhos ou custos.")
        st.stop()
    
    rental_net, own_net, difference, rental_commission_value, own_commission_value = calcular_ganhos(
        weekly_earnings, fuel_cost, st.session_state.other_costs
    )
    
    # ---
    # Se√ß√£o de Resultados
    # ---
    st.header("üìà Resultados")
    
    # M√©tricas
    col5, col6, col7 = st.columns(3)
    
    with col5:
        st.metric(
            "Carro Alugado (L√≠quido Semanal)",
            f"‚Ç¨ {rental_net:.2f}",
            delta=f"{rental_net-own_net:.2f} ‚Ç¨ vs. Pr√≥prio",
            delta_color="inverse" if rental_net < own_net else "normal"
        )
    
    with col6:
        st.metric(
            "Carro Pr√≥prio (L√≠quido Semanal)",
            f"‚Ç¨ {own_net:.2f}",
            delta=f"{own_net-rental_net:.2f} ‚Ç¨ vs. Alugado",
            delta_color="inverse" if own_net < rental_net else "normal"
        )
    
    with col7:
        annual_difference = difference * 52
        st.metric(
            "Diferen√ßa Anual",
            f"‚Ç¨ {annual_difference:.2f}",
            delta_color="inverse" if difference < 0 else "normal"
        )
    
    # Detalhamento dos c√°lculos
    st.subheader("Detalhamento dos C√°lculos")
    
    comparison_data = {
        "Descri√ß√£o": [
            "Ganhos Semanais",
            "Comiss√£o",
            "Custo do Aluguel",
            "Seguro",
            "Manuten√ß√£o",
            "Custo com Combust√≠vel",
            "Outros Custos",
            "Total L√≠quido"
        ],
        "Carro Alugado (‚Ç¨)": [
            f"{weekly_earnings:.2f}",
            f"-{rental_commission_value:.2f} ({st.session_state.rental_commission}%)",
            f"-{st.session_state.rental_cost:.2f}",
            "0.00",
            "0.00",
            f"-{fuel_cost:.2f}",
            f"-{st.session_state.other_costs:.2f}",
            f"{rental_net:.2f}"
        ],
        "Carro Pr√≥prio (‚Ç¨)": [
            f"{weekly_earnings:.2f}",
            f"-{own_commission_value:.2f} ({st.session_state.own_commission}%)",
            "0.00",
            f"-{st.session_state.own_insurance:.2f}",
            f"-{st.session_state.own_maintenance:.2f}",
            f"-{fuel_cost:.2f}",
            f"-{st.session_state.other_costs:.2f}",
            f"{own_net:.2f}"
        ]
    }
    
    df = pd.DataFrame(comparison_data)
    st.dataframe(df, use_container_width=True, hide_index=True)
    
    # Exporta√ß√£o como CSV
    csv = df.to_csv(index=False)
    st.download_button(
        label="üì• Baixar Resultados como CSV",
        data=csv,
        file_name="resultados_tvde.csv",
        mime="text/csv"
    )
    
    # Recomenda√ß√£o
    st.subheader("Recomenda√ß√£o")
    if difference > 0.01:
        st.success(f"‚úÖ O carro alugado √© mais vantajoso por ‚Ç¨ {difference:.2f} por semana, ou ‚Ç¨ {difference*52:.2f} por ano.")
    elif difference < -0.01:
        st.success(f"‚úÖ O carro pr√≥prio √© mais vantajoso por ‚Ç¨ {abs(difference):.2f} por semana, ou ‚Ç¨ {abs(difference*52):.2f} por ano.")
    else:
        st.info("‚ÑπÔ∏è Ambas as op√ß√µes t√™m o mesmo resultado financeiro.")
    
    # Visualiza√ß√£o gr√°fica
    st.subheader("Compara√ß√£o Visual")
    chart_data = pd.DataFrame({
        "Op√ß√£o": ["Carro Alugado", "Carro Pr√≥prio"],
        "Lucro L√≠quido (‚Ç¨)": [rental_net, own_net]
    })
    
    fig = px.bar(
        chart_data,
        x="Op√ß√£o",
        y="Lucro L√≠quido (‚Ç¨)",
        text_auto=".2f",
        color="Op√ß√£o",
        color_discrete_map={"Carro Alugado": "#4CAF50", "Carro Pr√≥prio": "#2196F3"},
        title="Lucro L√≠quido Semanal"
    )
    fig.update_layout(showlegend=False, title_x=0.5)
    st.plotly_chart(fig, use_container_width=True)

# ---
# Informa√ß√µes Adicionais e Rodap√©
# ---
with st.expander("üí° Dicas e Informa√ß√µes"):
    st.markdown("""
    - **Ganhos Semanais**: Valor total que voc√™ recebe pelos servi√ßos de TVDE em uma semana.
    - **Custo com Combust√≠vel**: Gasto semanal estimado com abastecimento.
    - **Outros Custos**: Inclui lavagens, estacionamento, portagens ou outros custos vari√°veis.
    - **Comiss√£o**: Percentual que a plataforma ret√©m pelos servi√ßos.
    - **Custo do Aluguel**: Valor semanal pelo aluguel do ve√≠culo (se aplic√°vel).
    - **Seguro**: Custo semanal do seguro do ve√≠culo pr√≥prio.
    - **Manuten√ß√£o**: Custo semanal estimado com manuten√ß√£o do ve√≠culo pr√≥prio.
                
    ‚ö†Ô∏è Considere outros fatores n√£o inclu√≠dos aqui, como:
    - Desvaloriza√ß√£o do ve√≠culo (no caso de carro pr√≥prio)
    - Impostos e taxas
    - Custos imprevistos (ex.: multas, reparos)
    """)

st.markdown("---")
st.caption("Desenvolvido para ajudar motoristas TVDE a tomar decis√µes financeiras informadas. üöó")
